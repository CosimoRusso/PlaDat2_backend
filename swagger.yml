swagger: "2.0"
info:
  description: "This is the API reference of PlaDat2."
  version: "1.0"
  title: "PlaDat API reference"
tags:
  - name: "student"
    description: "Operations about students"
  - name: "company"
    description: "Operations about companies"
paths:
  /api/student/register:
    post:
      tags:
        - "student"
      summary: "Creates student"
      description: "..."
      # nice to have: consumes/produces
      operationId: "createStudent"
      parameters:
        - in: "body"
          name: "body"
          description: "Student that needs to register"
          required: true
          schema:
            $ref: "#/definitions/Student"
      responses:
        201:
          description: "Student registered"
        400:
          description: "A string describing the error. Could be for example 'email already used.' or 'Invalid input.'"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "email already used."
        500:
          description: "Internal server error"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Internal Server error."
  /api/company/register:
    post:
      tags:
        - "company"
      summary: "Creates company"
      description: "..."
      # nice to have: consumes/produces
      operationId: "createCompany"
      parameters:
        - in: "body"
          name: "body"
          description: "Company that needs to register"
          required: true
          schema:
            $ref: "#/definitions/Company" #TODO: does not compose the example, manually fix
      responses:
        201:
          description: "Company registered"
        400:
          description: "A string describing the error. Could be for example 'email already used.' or 'Invalid input.'"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "email already used."
        500:
          description: "Internal server error"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Internal Server error."
  /api/student/login:
    post:
      tags:
        - "student"
      summary: "Login student"
      description: "..."
      # nice to have: consumes/produces
      operationId: "loginStudent"
      parameters:
        - in: "body"
          name: "body"
          description: "Student credentials"
          required: true
          schema:
            $ref: "#/definitions/Credentials"
      responses:
        201:
          description: "Student logged in succesfully"
          schema:
            type: "object"
            properties:
              jwt: 
                type: "string"
        400:
          description: "A string describing the error. Could be for example 'email already used.' or 'Invalid input.'"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "email already used."
        500:
          description: "Internal server error"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Internal Server error."
  /api/student/logout:
    post:
      tags:
        - "student"
      summary: "Logout student"
      description: "..."
      # nice to have: consumes/produces
      operationId: "logoutStudent"
      responses:
        201:
          description: "Student logged out succesfully"
        401:
          description: "Unauthrorized"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "You must be logged in to do this"
        500:
          description: "Internal server error"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Internal Server error."
      security:
        - Bearer: []
      x-security-scopes:
        - "student"
  /api/student/profile/{studentId}:
    get:
      tags:
        - "student"
      summary: "Student profile"
      description: "..."
      # nice to have: consumes/produces
      operationId: "getStudentProfile"
      parameters:
        - name: "studentId"
          in: "path"
          description: "id of the student"
          required: true
          type: "integer"
      responses:
        200:
          description: "Shows student profile"
          schema:
            $ref: "#/definitions/Student"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student id not valid"
        404:
          description: "Not Found"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student not Found"
        500:
          description: "Internal server error"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Internal Server error."
    post:
      tags:
        - "student"
      summary: "Edit Student profile"
      description: "..."
      # nice to have: consumes/produces
      operationId: "postStudentProfile"
      parameters:
        - name: "studentId"
          in: "path"
          description: "id of the student"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Student"
      responses:
        200:
          description: "Shows student profile"
          schema:
            $ref: "#/definitions/Student"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student id not valid"
        404:
          description: "Not Found"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student not Found"
        500:
          description: "Internal server error"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Internal Server error."
      security:
        - Bearer: []
      x-security-scopes:
        - "student"  
  /api/student/profile/{studentId}/capabilities:
    get:
      tags:
        - "student"
      summary: "Student capabilities"
      description: "..."
      # nice to have: consumes/produces
      operationId: "getStudentCapabilities"
      parameters:
        - name: "studentId"
          in: "path"
          description: "id of the student"
          required: true
          type: "integer"
      responses:
        200:
          description: "List of capabilities"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Capability"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student id not valid"
        404:
          description: "Not Found"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student not Found"
        500:
          description: "Internal server error"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Internal Server error."
    put:
      tags:
        - "student"
      summary: "Add a capability"
      description: "..."
      # nice to have: consumes/produces
      operationId: "addStudentCapability"
      parameters:
        - name: "studentId"
          in: "path"
          description: "id of the student"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties: 
              id:
                type: "integer"
      responses:
        201:
          description: "Capability added"
          schema:
            $ref: "#/definitions/Student"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student id not valid"
        404:
          description: "Not Found"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student not Found"
        500:
          description: "Internal server error"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Internal Server error."
      security:
        - Bearer: []
      x-security-scopes:
        - "student"
    delete:
      tags:
        - "student"
      summary: "Removes a capability for the student"
      description: "..."
      # nice to have: consumes/produces
      operationId: "removeStudentCapability"
      parameters:
        - name: "studentId"
          in: "path"
          description: "id of the student"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties: 
              id:
                type: "integer"
      responses:
        201:
          description: "Capability added"
          schema:
            $ref: "#/definitions/Student"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student id not valid"
        404:
          description: "Not Found"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student not Found"
        500:
          description: "Internal server error"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Internal Server error."
      security:
        - Bearer: []
      x-security-scopes:
        - "student"
  /api/student/profile/{studentId}/jobs/search:
    get:
      tags:
        - "student"
      summary: "List of jobs for the student"
      description: "..."
      # nice to have: consumes/produces
      operationId: "studentScrollJobs"
      parameters:
        - name: "studentId"
          in: "path"
          description: "id of the student"
          required: true
          type: "integer"
      responses:
        200:
          description: "List of jobs"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Job"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student id not valid"
        404:
          description: "Not Found"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student not Found"
        500:
          description: "Internal server error"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Internal Server error."
  /api/student/profile/{studentId}/jobs/discard/{jobId}:
    post:
      tags:
        - "student"
      summary: "Marks the job as discarded"
      description: "..."
      # nice to have: consumes/produces
      operationId: "discardJob"
      parameters:
        - name: "studentId"
          in: "path"
          description: "id of the student"
          required: true
          type: "integer"
        - name: "jobId"
          in: "path"
          description: "id of the job to discard"
          required: true
          type: "integer"
      responses:
        201:
          description: "Job discarded"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student id not valid"
        404:
          description: "Not Found"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student not Found"
        500:
          description: "Internal server error"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Internal Server error."
      security:
        - Bearer: []
      x-security-scopes:
        - "student"
  /api/student/profile/{studentId}/jobs/apply/{jobId}:
    post:
      tags:
        - "student"
      summary: "Apply the student to the job"
      description: "..."
      # nice to have: consumes/produces
      operationId: "applyToJob"
      parameters:
        - name: "studentId"
          in: "path"
          description: "id of the student"
          required: true
          type: "integer"
        - name: "jobId"
          in: "path"
          description: "id of the job to discard"
          required: true
          type: "integer"
      responses:
        201:
          description: "Succesfully applied to the job"
        400:
          description: "Bad Request"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student id not valid"
        404:
          description: "Not Found"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Student not Found"
        500:
          description: "Internal server error"
          schema:
            type: "object"
            properties:
              msg:
                type: "string"
            example:
              msg: "Internal Server error."
      security:
        - Bearer: []
      x-security-scopes:
        - "student"
definitions:
  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      userId:
        type: "integer"
    example:
      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOjI5LCJpYXQiOjE1NjE5OTg2NjB9.SWYMJXTTM8pe6NQw1QwS-d8Btt6Isuzzk5JtH775uV0"
      userId: 4
  Credentials:
    type: "object"
    properties:
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
  StudentBasicProfile:
    allOf:
      - type: "object"
        properties:
          firstName:
            type: "string"
          lastName:
            type: "string"
          profilePicture:
            type: "string"
            format: "url"
          birthDate:
            type: "string"
            format: "date"
          email:
            type: "string"
            format: "email"
    example:
      pippo:
        firstName: "Pippo"
        lastName: "Poppi"
        profilePicture: "www.my-pictures-api.com/picture45"
        birthDate: "15-10-1997"
        email: "pippo@poppi.com"
  StudentFullProfile:
    allOf:
      - $ref: "#/definitions/StudentBasicProfile"
      - type: "object"
        properties:
          capabilities:
            type: "array"
            items:
              type: "integer"
    example:
      pippo:
        firstName: "Pippo"
        lastName: "Poppi"
        profilePicture: "www.my-pictures-api.com/picture45"
        birthDate: "15-10-1997"
        email: "pippo@poppi.com"
        password: "s3cr3t"
        capabilities: [2,4,6]
  Student:
    allOf:
      - $ref: "#/definitions/StudentFullProfile"
      - $ref: "#/definitions/Credentials"

  CompanyBasicProfile:
    allOf:
      - type: "object"
        properties:
          id:
            type: "integer"
          name:
            type: "string"
          email:
            type: "string"
            format: "email"
          description:
            type: "string"
          profilePicture:
            type: "string"
            format: "url"
          address:  
            type: "string"
    example:
      pippoCompany:
        id: 15 ##todo: check because it makes no sense to have them choose the id
        name: "pippoCompany"
        email: "pippo@pippoCompany.com"
        description: "Topolinia's best company"
        profilePicture: "www.my-pictures-api.com/picture42"
        address: "82, pippo's street, Topolinia"
  
  CompanyFullProfile:
    allOf:
      - $ref: "#/definitions/CompanyBasicProfile"
      - type: object
        properties:
          jobs:
            type: array
            $ref: "#/definitions/Job"

  Company: #TODO: examples (??)
    allOf:
      - $ref: "#definitions/CompanyFullProfile"
      - $ref: "#/definitions/Credentials"
  Capability:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
    example:
      id: 12
      name: "Java"

  Job:
    type: "object"
    properties:
      id:
        type: "integer"
      title:
        type: "string"
      description:
        type: "string"
      requiredCapabilities:
        type: "array"
        items:
          $ref: "#/definitions/Capability"
      optionalCapabilities:
        type: "array"
        items:
          $ref: "#/definitions/Capability"
    example:
      JuniorDeveloper:
        id: 15
        title: "JuniorDeveloper"
        description: "Junior Developer position at PippoCompany "
  Image:
    type: "string"
    format: "url"


securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "x-auth-token"
    in: "header"